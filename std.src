pass
mov 0 r1
bind continue ip
	mov r2 r0
	movw r3 !/
	cmp [r0] r3
	jne !append
	add r0 r0 !8
	cmp [r0] r3
	jne !append
	bind inner ip
		add r0 r0 !8
		movw r3 !\
		cmp [r0] r3
		jne !inner 
		add r0 r0 !8
		jmp !continue 
	bind append ip
	mov r0 r2
	mov [r1] [r0]
	add r1 r1 !8
	add r0 r0 !8
	cmp r0 0
	jlt !continue
bind break ip
mov r0 !1
int	
end

// the above pass defines line comments

// byte literal blocks for passes
pass
movw 0 !pass_literal_bytes
mov 8 r1
bind loop ip
	cmp [r0] 0
	jne !next
	add r0 r0 !8
	bind change ip
		cmp [r0] 0
		jeq !break
		movw [r1] !mov add r1 r1 !8
		movw [r1] !\[  add r1 r1 !8
		movw [r1] !r1  add r1 r1 !8
		movw [r1] !\]  add r1 r1 !8
		movw [r1] !\[  add r1 r1 !8
		movw [r1] [r0] add r1 r1 !8
		movw [r1] !\]  add r1 r1 !8
		add r0 r0 !8
		jmp !change
	bind break ip
	add r0 r0 !8
	cmp r0 8
	jeq !exit
	jmp !loop
	bind next ip
	mov [r1] [r0]
	add r0 r0 !8
	add r1 r1 !8
	cmp r0 8
	jne !loop
bind exit ip
mov r0 !1
int
end

// stack initialization
pass
movw 0 !stack_init
mov 8 r1
bind loop ip
	cmp [r0] 0
	jne !next
	pass_literal_bytes
	comp
		mov r1 !mtp
		sub 0 r1 !8
		sub 8 0 !8
		mov r0 !1
		int
	run
	bind sp 0
	bind fp 8
	pass_literal_bytes
	add r0 r0 !8
	jmp !loop
	bind next ip
	mov [r1] [r0]
	add r0 r0 !8
	add r1 r1 !8
	cmp r0 8
	jne !loop
mov r0 !1
int
end

// multicore register setup
pass
movw 0 !core_register_init
mov 8 r1
bind loop ip
	cmp [r0] 0
	jne !next
	pass_literal_bytes
	comp
		mul r1 !6 !8
		mul r2 r1 !2
		mul r3 r1 !3
		add 0  !r0 r1
		add 8  !r1 r1
		add 10 !r2 r1
		add 18 !r3 r1
		add 20 !r0 r2
		add 28 !r1 r2
		add 30 !r2 r2
		add 38 !r3 r2
		add 40 !r0 r3
		add 48 !r1 r3
		add 50 !r2 r3
		add 58 !r3 r3
		mov r0 !1
		int
	run
	bind r01 0
	bind r11 8
	bind r21 10
	bind r31 18
	bind r02 20
	bind r12 28
	bind r22 30
	bind r32 38
	bind r03 40
	bind r13 48
	bind r23 50
	bind r33 58
	bind save_r0 !r0
	bind save_r1 !r1
	bind save_r2 !r2
	bind save_r3 !r3
	pass_literal_bytes
	add r0 r0 !8
	jmp !loop
	bind next ip
	mov [r1] [r0]
	add r0 r0 !8
	add r1 r1 !8
	cmp r0 8
	jne !loop
mov r0 !1
int
end

// standard pass
// pass
// mov 8 r1
// bind loop ip
	// mov [r1] [r0]
	// add r0 r0 !8
	// add r1 r1 !8
	// cmp r0 8
	// jne !loop
// mov r0 !1
// int
// end

// test
stack_init
core_register_init

bind loop ip
jmp loop

mov r0 !1
int 
