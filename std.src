bind 1 +comment:// ... $ {
	
}

bind 1 hoist_anchor {
	[ mov
	| movh
	| movl
	| add
	| sub
	| mul
	| div
	| mod
	| and
	| or
	| xor
	| not
	| com
	| int
	| jmp
	| cmp
	| jle
	| jge
	| jlt
	| jgt
	| jeq
	| jne
	| shl
	| shr
	| bind
	| explicit_hoist_anchor
	]
}

bind 1 label +name {
	bind 0 name = ip
}

bind 1 let +name +binding:\= ... in +body:\{ ... \} {
	comptime {
		body
	}
	bind 0 name = binding
}

bind 1 comptime +body:\{ ... \} {
	comp
		explicit_hoist_anchor
		body
		mov r0 !1
		int
	run
	explicit_hoist_anchor
}

comptime{
	let tmp = r1 in {
		mov r1 !mtp
		sub r1 r1 !8
	}
	let sp = r1 in { sub r1 r1 !8 }
	let fp = r1 in { sub r1 r1 !8 }
	let fsp = r1 in { sub r1 r1 !8 }
	let fop = r1 in { sub r1 r1 !8 }
	mov sp !mtp
	mov fsp !mtp
	sub sp sp !20
	mov fp sp
	sub fsp fsp !2000
}

bind 0 tmp = !tmp

bind 0 sp = !sp
bind 0 fp = !fp
mov sp !mtp
sub sp sp !10
mov fp sp

bind 1 psh ! +x {
	sub sp sp !8
	mov [sp] !x
}

bind 1 psh +x {
	sub sp sp !8
	mov [sp] x
}

bind 1 pop +r {
	mov r [sp]
	add sp sp !8
}

bind 1 fpsh {
	comptime{
		sub fsp fsp !8
		mov [fsp] fop
		mov fop !0
	}
}

bind 1 fpop {
	comptime {
		mov fop [fsp]
		add fsp fsp !8
	}
}

bind 1 pshfa +x {
	psh x
	comptime {
		add fop fop !8
	}
}

bind 1 pshfa ! +x {
	psh !x
	comptime {
		add fop fop !8
	}
}

bind 1 popfa +r {
	pop r
	comptime {
		sub fop fop !8
	}
}

bind 1 term +name \= {
	bind 0 name = ip
	explicit_hoist_anchor
	frame {
		explicit_hoist_anchor
	}
}

bind 1 @tag frame +body:\{ ... \} {
	bind 1 var +name +val:\= ... \; {
		val
		bind 0 tag#name = fop
	}
	bind 1 \$ +name {
		sub tmp fp !tag#name
		;;; +anchor:hoist_anchor
		[tmp]
	}
	bind 1 \& +name {
		sub tmp fp !tag#name
		;;; +anchor:hoist_anchor
		tmp
	}
	bind 1 word +w {
		pshfa !w
	}
	bind 1 str +string: " ,,, " {
		string{c
			pshfa !0
		}
		mov r0 sp
		mov r1 !0
		string{c
			mov [r0] c
			add r0 r0 !8
			add r1 r1 !1
		}
		pshfa r1
		mov r1 sp
		pshfa r1
	}
	;;; +anchor:hoist_anchor
	body
}

bind 1 +val:stderr ... \; {
	psh r0
	psh r1
	mov r0 !2
	mov r1 val
	int
	pop r1
	pop r0
}

bind 1 @tag \( +name \) {
	psh tag#end
	psh fp
	mov fp sp
	fpsh
	jmp name
	bind 0 tag#end = ip
	fpop
}

bind 1 ret {
	mov sp fp
	pop fp
	mov tmp sp
	add sp sp !8
	mov ip [tmp]
}

bind 1 explicit_hoist_anchor {
}

//test

(main)
(exit)

term main =
	var x = word 41;
	var y = word 42;
	// stderr $x;
	// stderr $y;
	var greeting = str "hello world" ;
	mov r3 $greeting
	mov r0 !0
	mov r1 [r3]
	label loop
		cmp r0 r1
		add r0 r0 !1
		jge exit
		add r3 r3 !8
		mov r2 [r3]
		stderr r2;
		jmp loop
	label exit
	ret

term exit =
	mov r0 !1
	int


