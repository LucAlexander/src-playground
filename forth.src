pass
mov 0 r1
bind continue ip
	mov r2 r0
	movw r3 !/
	cmp [r0] r3
	jne !append
	add r0 r0 !8
	cmp [r0] r3
	jne !append
	bind inner ip
		add r0 r0 !8
		movw r3 !
		cmp [r0] r3
		jne !inner 
		add r0 r0 !8
		jmp !continue 
	bind append ip
	mov r0 r2
	mov [r1] [r0]
	add r1 r1 !8
	add r0 r0 !8
	cmp r0 0
	jlt !continue
bind break ip
mov r0 !1
int	
end

// the above pass defines line comments

// byte literal blocks for passes
pass
movw 0 !pass_literal_bytes
mov 8 r1
bind loop ip
	cmp [r0] 0
	jne !next
	add r0 r0 !8
	bind change ip
		cmp [r0] 0
		jeq !break
		movw [r1] !movw add r1 r1 !8
		movw [r1] !\[   add r1 r1 !8
		movw [r1] !r1   add r1 r1 !8
		movw [r1] !\]   add r1 r1 !8
		movw [r1] !\!   add r1 r1 !8
		mov  [r1] [r0]  add r1 r1 !8
		movw [r1] !add  add r1 r1 !8
		movw [r1] !r1   add r1 r1 !8
		movw [r1] !r1   add r1 r1 !8
		movw [r1] !\!   add r1 r1 !8
		mov  [r1] !8    add r1 r1 !8
		add r0 r0 !8
		jmp !change
	bind break ip
	add r0 r0 !8
	cmp r0 8
	jeq !exit
	jmp !loop
	bind next ip
	mov [r1] [r0]
	add r0 r0 !8
	add r1 r1 !8
	cmp r0 8
	jne !loop
bind exit ip
mov r0 !1
int
end

// stack initialization
pass
movw 0 !stack_init
mov 8 r1
bind loop ip
	cmp [r0] 0
	jne !next
	pass_literal_bytes
comp
	mov r1 !mtp
	sub 0 r1 !8
	sub 8 0 !8
	mov r0 !1
	int
run
bind sp 0
bind fp 8
mov sp !sp
mov fp sp
	pass_literal_bytes
	add r0 r0 !8
	jmp !loop
	bind next ip
	mov [r1] [r0]
	add r0 r0 !8
	add r1 r1 !8
	cmp r0 8
	jne !loop
mov r0 !1
int
end

// multicore register setup
pass
movw 0 !core_register_init
mov 8 r1
bind loop ip
	cmp [r0] 0
	jne !next
	pass_literal_bytes
comp
	mul r1 !6 !8
	mul r2 r1 !2
	mul r3 r1 !3
	add 0  !r0 r1
	add 8  !r1 r1
	add 10 !r2 r1
	add 18 !r3 r1
	add 20 !r0 r2
	add 28 !r1 r2
	add 30 !r2 r2
	add 38 !r3 r2
	add 40 !r0 r3
	add 48 !r1 r3
	add 50 !r2 r3
	add 58 !r3 r3
	mov r0 !1
	int
run
bind r01 0
bind r11 8
bind r21 10
bind r31 18
bind r02 20
bind r12 28
bind r22 30
bind r32 38
bind r03 40
bind r13 48
bind r23 50
bind r33 58
bind save_r0 !r0
bind save_r1 !r1
bind save_r2 !r2
bind save_r3 !r3
	pass_literal_bytes
	add r0 r0 !8
	jmp !loop
	bind next ip
	mov [r1] [r0]
	add r0 r0 !8
	add r1 r1 !8
	cmp r0 8
	jne !loop
mov r0 !1
int
end

// whitespace skip for pass
pass
movw 0 !pass_whitespace
mov 8 r1
// newline
bind loop ip
	cmp [r0] 0
	jne !next
	pass_literal_bytes
bind pass_loop ip
movw r2 ! 
cmp [r0] r2
jeq !pass_skip
movw r2 !	
cmp [r0] r2
jeq !pass_skip
movw r2 !
cmp [r0] r2
jeq !pass_skip
jmp !pass_end
bind pass_skip ip
add r0 r0 !8
jmp !pass_loop
bind pass_end ip
unbind pass_loop
unbind pass_skip
unbind pass_end
	pass_literal_bytes
	add r0 r0 !8
	jmp !loop	
	bind next ip
	mov [r1] [r0]
	add r0 r0 !8
	add r1 r1 !8
	cmp r0 8
	jne !loop
mov r0 !1
int
end

pass
movw 0 !pass_location
mov 8 r1
bind loop ip
	cmp [r0] 0
	jne !next
	add r0 r0 !8
	pass_literal_bytes
movw r2 !\!
cmp [r0] r2
jeq !parse_imm
movw r2 !\[
cmp [r0] r2
jeq !parse_deref
jmp !parse_imm
bind parse_deref ip
	movw r2 !\]
	cmp [r0] r2
	jeq !parse_end
	mov [r1] [r0]
	add r0 r0 !8
	add r1 r1 !8
	jmp parse_deref
unbind parse_deref
bind parse_imm ip
	movw r2 ! 
	cmp [r0] r2
	jeq !parse_end
	movw r2 !	
	cmp [r0] r2
	jeq !parse_end
	movw r2 !
	cmp [r0] r2
	jeq !parse_end
	mov [r1] [r0]
	add r0 r0 !8
	add r1 r1 !8
	jmp parse_imm
unbind parse_imm
bind parse_end ip
unbind parse_end
	pass_literal_bytes
	cmp r0 8
	jne !loop
	jmp !exit
	bind next ip
	mov [r1] [r0]
	add r0 r0 !8
	add r1 r1 !8
	cmp r0 8
	jne !loop
bind exit ip
mov r0 !1
int
end

// word definitions
pass
movw 0 !:
mov 8 r1
bind loop ip
	cmp [r0] 0
	jne !next
	pass_whitespace
	pass_literal_bytes
pass
movw 0
	pass_literal_bytes
	mov r2 !\!
	mov [r1] r2
	add r1 r1 !8
	mov [r1] [r0]
	add r0 r0 !8
	add r1 r1 !8
	pass_literal_bytes
mov 8 r1
bind word_loop ip
cmp r0 0
jne !word_next
	pass_literal_bytes
	movw [r1] !pass_literal_content
	add r1 r1 !8
	pass_literal_bytes
bind word_inner ip
mov r2 !;
cmp [r0] r2
jne !word_inner_next
add r0 r0 !8
jmp word_loop
bind word_inner_next ip
mov [r1] [r0]
add r0 r0 !8
add r1 r1 !8
cmp r0 8
jne !word_inner
unbind word_inner
	pass_literal_bytes
	movw [r1] !pass_literal_content
	add r1 r1 !8
	pass_literal_bytes
add r0 r0 !8
jmp !word_loop
bind word_next ip
mov [r1] [r0]
add r0 r0 !8
add r1 r1 !8
cmp r0 8
jne !word_loop
unbind word_loop
unbind word_next
mov r0 !1
int
end
	pass_literal_bytes
	add r0 r0 !8
	jmp !loop 
	bind next ip
	mov [r1] [r0]
	add r0 r0 !8
	add r1 r1 !8
	cmp r0 8
	jne !loop
bind break ip
mov r0 !1
int
end

// stack push operation
pass
movw 0 !psh
mov 8 r1
bind loop ip
	cmp [r0] 0
	jne !next
	add r0 r0 !8
	pass_literal_bytes
sub sp sp !8
mov [sp]
	pass_literal_bytes
	bind next ip	
	mov [r1] [r0]
	add r0 r0 !8
	add r1 r1 !8
	cmp r0 8
	jne !loop
mov r0 !1
int
end

// stack pop operation
pass
movw 0 !pop
mov 8 r1
bind loop ip
	cmp [r0] 0
	jne !next
	add r0 r0 !8
	pass_literal_bytes
mov 
	pass_literal_bytes
	pass_whitespace
	pass_location
	pass_literal_bytes
[sp]
add sp sp !8
	pass_literal_bytes
	bind next ip	
	mov [r1] [r0]
	add r0 r0 !8
	add r1 r1 !8
	cmp r0 8
	jne !loop
mov r0 !1
int
end

// byte literal blocks for passes
pass
movw 0 !pass_literal_content
mov 8 r1
bind loop ip
	cmp [r0] 0
	jne !next
	add r0 r0 !8
	bind change ip
		cmp [r0] 0
		jeq !break
		movw [r1] !movw add r1 r1 !8
		movw [r1] !\[   add r1 r1 !8
		movw [r1] !r1   add r1 r1 !8
		movw [r1] !\]   add r1 r1 !8
		movw [r1] !\!   add r1 r1 !8
		mov  [r1] [r0]  add r1 r1 !8
		movw [r1] !add  add r1 r1 !8
		movw [r1] !r1   add r1 r1 !8
		movw [r1] !r1   add r1 r1 !8
		movw [r1] !\!   add r1 r1 !8
		mov  [r1] !8    add r1 r1 !8
		add r0 r0 !8
		jmp !change
	bind break ip
	add r0 r0 !8
	cmp r0 8
	jeq !exit
	jmp !loop
	bind next ip
	mov [r1] [r0]
	add r0 r0 !8
	add r1 r1 !8
	cmp r0 8
	jne !loop
bind exit ip
mov r0 !1
int
end

// dup
pass
movw 0 !dup
mov 8 r1
bind loop ip
	cmp [r0] 0
	jne !next
	pass_literal_content
pop r0
psh r0
psh r0
	pass_literal_content
	add r0 r0 !8
	jmp !loop 
	bind next ip
	mov [r1] [r0]
	add r0 r0 !8
	add r1 r1 !8
	cmp r0 8
	jne !loop
mov r0 !1
int
end

// swp
pass
movw 0 !swp
mov 8 r1
bind loop ip
	cmp [r0] 0
	jne !next
	pass_literal_content
pop r0
pop r1
psh r0
psh r1
	pass_literal_content
	add r0 r0 !8
	jmp !loop 
	bind next ip
	mov [r1] [r0]
	add r0 r0 !8
	add r1 r1 !8
	cmp r0 8
	jne !loop
mov r0 !1
int
end

// rot
pass
movw 0 !rot
mov 8 r1
bind loop ip
	cmp [r0] 0
	jne !next
	pass_literal_content
pop r0
pop r1
pop r2
psh r1
psh r0
psh r2
	pass_literal_content
	add r0 r0 !8
	jmp !loop 
	bind next ip
	mov [r1] [r0]
	add r0 r0 !8
	add r1 r1 !8
	cmp r0 8
	jne !loop
mov r0 !1
int
end

// nip
pass
movw 0 !nip
mov 8 r1
bind loop ip
	cmp [r0] 0
	jne !next
	pass_literal_content
pop r0
pop r1
psh r0
	pass_literal_content
	add r0 r0 !8
	jmp !loop 
	bind next ip
	mov [r1] [r0]
	add r0 r0 !8
	add r1 r1 !8
	cmp r0 8
	jne !loop
mov r0 !1
int
end

//TODO pass_literal_post

// standard pass
// pass
// mov 8 r1
// bind loop ip
	// mov [r1] [r0]
	// add r0 r0 !8
	// add r1 r1 !8
	// cmp r0 8
	// jne !loop
// mov r0 !1
// int
// end

// test
stack_init
core_register_init

mov r0 !4
psh r0
pop r1
dup
swp
rot
nip

:quad dup dup;

bind loop ip
jmp loop

mov r0 !1
int 
